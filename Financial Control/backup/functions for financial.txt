CREATE OR REPLACE FUNCTION get_amount_transactions()
RETURNS TRIGGER 
AS $$
DECLARE amount INTEGER;
DECLARE receiptID INTEGER;
	BEGIN
  	IF TG_OP = 'INSERT' AND NEW.receipt_id IS NOT NULL THEN
      SELECT COUNT(*) INTO amount
      FROM transactions
      WHERE receipt_id = NEW.receipt_id;
      
      receiptID = NEW.receipt_id;
      RETURN NEW;     
    ELSIF TG_OP = 'DELETE' AND OLD.receipt_id IS NOT NULL THEN
      SELECT COUNT(*) INTO amount
      FROM transactions
      WHERE receipt_id = OLD.receipt_id;
      
      receiptID = OLD.receipt_id;
  	ELSE
    	receiptID = NULL;
  	END IF;
	
  	IF receiptID IS NOT NULL THEN
 			UPDATE receipt SET amount_transactions = amount WHERE id = receiptID;
     	 RETURN OLD;     
    END IF;
    

  END;
$$
LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION get_total_price_receipt()
RETURNS TRIGGER
AS $$
DECLARE totalPrice DECIMAL(10,2);
  BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') AND NEW.receipt_id IS NOT NULL THEN
    
    	SELECT SUM(total_price) INTO totalPrice
      FROM transactions
      WHERE receipt_id = NEW.receipt_id;
      
      UPDATE receipt 
      SET total_price_transactions = totalPrice
      WHERE id = NEW.receipt_id;
      RETURN NEW;
      
    ELSIF TG_OP = 'DELETE' AND OLD.receipt_id IS NOT NULL THEN
    
    	SELECT SUM(total_price) INTO totalPrice
      FROM transactions
      WHERE receipt_id = OLD.receipt_id;
       
      UPDATE receipt
      SET total_price_transactions = totalPrice
      WHERE id = OLD.receipt_id;
    	
      RETURN OLD;
    END IF;
  END;
$$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER
AS $$
	BEGIN
  	IF TG_OP = 'UPDATE' THEN
    NEW.updated_at = NOW();
    
    RETURN NEW;
    END IF;
  END;
$$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_balance()
RETURNS TRIGGER
AS $$
DECLARE totalIncome DECIMAL(10,2);
DECLARE totalDebit DECIMAL(10,2);
DECLARE totalCreditPaid DECIMAL(10,2);
DECLARE totalBalance DECIMAL(10,2);
	BEGIN   
		IF ((TG_OP = 'INSERT' AND 
        (NEW.transaction_type = 'debit' OR NEW.transaction_type = 'income') OR
         
        (NEW.transaction_type = 'credit' AND 
         NEW.installments_paid = TRUE)) OR
        
        (TG_OP = 'UPDATE' AND
				((NEW.transaction_type = 'debit' OR NEW.transaction_type = 'income') AND
  				OLD.total_price != NEW.total_price) OR    

				(NEW.transaction_type = 'credit' AND 
         OLD.installments_paid != NEW.installments_paid AND
         NEW.installments_paid = TRUE))) THEN

             SELECT SUM(total_price) INTO totalDebit
             FROM transactions 
             WHERE user_id = NEW.user_id AND
             transaction_type = 'debit';
             
             IF totalDebit IS NULL THEN
               totalDebit = 0;    
             END IF;

             SELECT SUM(total_price) INTO totalCreditPaid
             FROM transactions 
             WHERE user_id = NEW.user_id AND
             transaction_type = 'credit' AND
             installments_paid = TRUE;
             
             IF totalCreditPaid IS NULL THEN
               totalCreditPaid = 0;    
             END IF;

             SELECT SUM(total_price) INTO totalIncome
             FROM transactions 
             WHERE user_id = NEW.user_id AND
             transaction_type = 'income';
             
             IF totalIncome IS NULL THEN
               totalIncome = 0;    
             END IF;
             
             totalBalance = totalIncome - (totalDebit + totalCreditPaid);
             
             UPDATE cash_flow
             SET balance = totalBalance
             WHERE user_id = NEW.user_id;     
             
             RETURN NEW;
             
    ELSIF TG_OP = 'DELETE' THEN
    
    				 SELECT SUM(total_price) INTO totalDebit
             FROM transactions 
             WHERE user_id = OLD.user_id AND
             transaction_type = 'debit';
             
             IF totalDebit IS NULL THEN
               totalDebit = 0;    
             END IF;

             SELECT SUM(total_price) INTO totalCreditPaid
             FROM transactions 
             WHERE user_id = OLD.user_id AND
             transaction_type = 'credit' AND
             installments_paid = TRUE;
             
             IF totalCreditPaid IS NULL THEN
               totalCreditPaid = 0;    
             END IF;

             SELECT SUM(total_price) INTO totalIncome
             FROM transactions 
             WHERE user_id = OLD.user_id AND
             transaction_type = 'income';
             
             IF totalIncome IS NULL THEN
               totalIncome = 0;    
             END IF;
             
             totalBalance = totalIncome - (totalDebit + totalCreditPaid);
             
             UPDATE cash_flow
             SET balance = totalBalance
             WHERE user_id = OLD.user_id;     
             
             RETURN NULL;
		ELSE
    	RETURN NEW;
    END IF; 
  END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_cash_flow()
RETURNS TRIGGER
AS $$
	BEGIN
  		INSERT INTO cash_flow (user_id) VALUES (NEW.id);
      RETURN NEW;
  END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_total_expenses()
RETURNS TRIGGER
AS $$
DECLARE totalExpenses DECIMAL(10,2);
	BEGIN
     IF(       
         (TG_OP = 'INSERT' AND      
         (NEW.transaction_type = 'debit' OR 
          NEW.transaction_type = 'credit' AND NEW.installments_paid = TRUE)) OR

         (TG_OP = 'UPDATE' AND OLD.total_price != NEW.total_price 
          AND
          (NEW.transaction_type = 'debit' OR
            (NEW.transaction_type = 'credit' AND 
            NEW.installments_paid = TRUE AND
            OLD.installments_paid != NEW.installments_paid))
         )      
       ) THEN
      
    	SELECT SUM(total_price) INTO totalExpenses
      FROM transactions
      WHERE user_id = NEW.user_id AND
      (transaction_type = 'debit' OR 
       transaction_type = 'credit' AND installments_paid = TRUE);
      
      UPDATE cash_flow
      SET total_expenses = totalExpenses
      WHERE user_id = NEW.user_id;
      
      RETURN NEW;
      
    ELSIF (TG_OP = 'DELETE' AND
       (OLD.transaction_type = 'debit' OR
        OLD.transaction_type = 'credit' AND OLD.installments_paid = TRUE)) THEN
       
    	SELECT SUM(total_price) INTO totalExpenses
      FROM transactions
      WHERE user_id = OLD.user_id AND
      (transaction_type = 'debit' OR 
       transaction_type = 'credit' AND installments_paid = TRUE);

      UPDATE cash_flow
      SET total_expenses = totalExpenses
      WHERE user_id = OLD.user_id;
       
      RETURN NULL;
       
    ELSE
       RETURN NEW;
    END IF;
  END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_total_credit_expenses()
RETURNS TRIGGER
AS $$
DECLARE totalCredit DECIMAL(10,2);
	BEGIN
  	IF(TG_OP = 'INSERT' AND 
       NEW.transaction_type = 'credit' AND 
       NEW.installments_paid = false ) THEN
       
       SELECT SUM(total_price) INTO totalCredit
       FROM transactions
       WHERE user_id = NEW.user_id AND
       transaction_type = 'credit' AND
       installments_paid = FALSE;
       
       IF totalCredit IS NULL THEN
          totalCredit = 0;
       END IF;
       
       UPDATE cash_flow 
       SET total_credit_expenses = totalCredit
       WHERE user_id = NEW.user_id;
       
       RETURN NEW;
    
    ELSIF ( TG_OP = 'DELETE' AND
    OLD.transaction_type = 'credit' AND 
    OLD.installments_paid = false ) THEN
    
       SELECT SUM(total_price) INTO totalCredit
       FROM transactions
       WHERE user_id = OLD.user_id AND
       transaction_type = 'credit' AND
       installments_paid = FALSE;
       
       IF totalCredit IS NULL THEN
          totalCredit = 0;
       END IF;
       
       UPDATE cash_flow 
       SET total_credit_expenses = totalCredit
       WHERE user_id = OLD.user_id;
       
       RETURN NULL;
    
    ELSE 
    	IF TG_OP = 'INSERT' THEN
      	RETURN NEW;
			END IF;
      
      IF TG_OP = 'DELETE' THEN
      	RETURN NULL;
			END IF;      
    END IF;
  END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION check_status_installments()
RETURNS TRIGGER 
AS $$
DECLARE amount_not_paid INTEGER;
DECLARE transaction_status BOOLEAN;
DECLARE new_status BOOLEAN;
	BEGIN
	
	IF TG_OP = 'UPDATE' AND (OLD.paid <> NEW.paid) THEN
	  SELECT COUNT(*) INTO amount_not_paid
      FROM credit_installments
      WHERE transaction_id = NEW.transaction_id
	  AND paid = FALSE;
	  
	  SELECT installments_paid INTO transaction_status
	  FROM transactions
      WHERE id = NEW.transaction_id;
	    
	  IF amount_not_paid >= 1 AND transaction_status = TRUE THEN
	  		new_status = FALSE;
	  END IF;
	  
	  IF amount_not_paid < 1 AND transaction_status = FALSE THEN
	  		new_status = TRUE;
	  END IF;
		  
	  IF new_status IS NOT NULL THEN
	  	  UPDATE transactions SET installments_paid = new_status WHERE id = NEW.transaction_id;
	  END IF;
	END IF;
	RETURN NEW;
  END;
$$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION create_credit_installments()
RETURNS TRIGGER 
AS $$
DECLARE amount_installments INTEGER;
DECLARE current_month TIMESTAMP = CURRENT_DATE;

	BEGIN
	
	IF TG_OP = 'INSERT' AND NEW.transaction_type = 'credit' THEN
		
	  amount_installments = NEW.total_installments;
	  
	  FOR num IN 1..amount_installments LOOP
	  	current_month = current_month + INTERVAL '1 month';
        INSERT INTO credit_installments (installment_number, month, value,transaction_id, user_id)
        VALUES (num, to_char(current_month, 'FMMonth'), NEW.unit_price, NEW.id, NEW.user_id);
      END LOOP;
	  
	END IF;
	RETURN NEW;
  END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION calculate_total_price()
RETURNS TRIGGER 
AS $$
	BEGIN
		IF TG_OP = 'INSERT' OR
		(TG_OP = 'UPDATE' AND 
		 (OLD.unit_price <> NEW.unit_price OR
		 OLD.amount <> NEW.amount OR
		 OLD.total_installments <> NEW.total_installments))THEN
			
			IF (NEW.transaction_type = 'income' OR NEW.transaction_type = 'debit') THEN	
				NEW.total_price = NEW.unit_price * NEW.amount;			
			END IF;
			
			IF (NEW.transaction_type = 'credit') THEN	
				NEW.total_price = NEW.unit_price * NEW.total_installments;			
			END IF;
			
		END IF;
		
		RETURN NEW;
  	END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION disable_update_credit()
RETURNS TRIGGER 
AS $$
	BEGIN
		IF (TG_OP = 'UPDATE' AND (NEW.transaction_type = 'income' OR NEW.transaction_type = 'debit') OR			
		 (NEW.transaction_type = 'credit' AND
	     OLD.description <> NEW.description OR
		 OLD.installments_paid <> NEW.installments_paid OR
		 OLD.has_receipt <> NEW.has_receipt OR
		 OLD.updated_at <> NEW.updated_at OR
		 OLD.receipt_id <> NEW.receipt_id ))THEN				
			RETURN NEW;			
		END IF;
		RETURN NULL;
  	END;
$$
LANGUAGE plpgsql;